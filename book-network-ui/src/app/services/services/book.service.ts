/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { firstValueFrom } from 'rxjs';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnBorrowBook } from '../fn/book/approve-return-borrow-book';
import { ApproveReturnBorrowBook$Params } from '../fn/book/approve-return-borrow-book';
import { BookResponse } from '../models/book-response';
import { borrowBook } from '../fn/book/borrow-book';
import { BorrowBook$Params } from '../fn/book/borrow-book';
import { findAllBooks } from '../fn/book/find-all-books';
import { FindAllBooks$Params } from '../fn/book/find-all-books';
import { findAllBooksByOwner } from '../fn/book/find-all-books-by-owner';
import { FindAllBooksByOwner$Params } from '../fn/book/find-all-books-by-owner';
import { findAllBorrowedBooks } from '../fn/book/find-all-borrowed-books';
import { FindAllBorrowedBooks$Params } from '../fn/book/find-all-borrowed-books';
import { findAllReturnedBooks } from '../fn/book/find-all-returned-books';
import { FindAllReturnedBooks$Params } from '../fn/book/find-all-returned-books';
import { findById } from '../fn/book/find-by-id';
import { FindById$Params } from '../fn/book/find-by-id';
import { PageResponseBookResponse } from '../models/page-response-book-response';
import { PageResponseBorrowedBookResponse } from '../models/page-response-borrowed-book-response';
import { returnBorrowBook } from '../fn/book/return-borrow-book';
import { ReturnBorrowBook$Params } from '../fn/book/return-borrow-book';
import { saveBook } from '../fn/book/save-book';
import { SaveBook$Params } from '../fn/book/save-book';
import { updateArchivedStatus } from '../fn/book/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/book/update-archived-status';
import { updateShareableStatus } from '../fn/book/update-shareable-status';
import { UpdateShareableStatus$Params } from '../fn/book/update-shareable-status';
import { uploadBookCoverPicture } from '../fn/book/upload-book-cover-picture';
import { UploadBookCoverPicture$Params } from '../fn/book/upload-book-cover-picture';

@Injectable({ providedIn: 'root' })
export class BookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllBooks()` */
  static readonly FindAllBooksPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooks$Response(
    params?: FindAllBooks$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<PageResponseBookResponse>> {
    const obs = findAllBooks(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooks(
    params?: FindAllBooks$Params,
    context?: HttpContext
  ): Promise<PageResponseBookResponse> {
    const resp = this.findAllBooks$Response(params, context);
    return resp.then(
      (r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body
    );
  }

  /** Path part for operation `saveBook()` */
  static readonly SaveBookPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook$Response(
    params: SaveBook$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<number>> {
    const obs = saveBook(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook(params: SaveBook$Params, context?: HttpContext): Promise<number> {
    const resp = this.saveBook$Response(params, context);
    return resp.then((r: StrictHttpResponse<number>): number => r.body);
  }

  /** Path part for operation `uploadBookCoverPicture()` */
  static readonly UploadBookCoverPicturePath = '/books/cover/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadBookCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverPicture$Response(
    params: UploadBookCoverPicture$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<{}>> {
    const obs = uploadBookCoverPicture(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadBookCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverPicture(
    params: UploadBookCoverPicture$Params,
    context?: HttpContext
  ): Promise<{}> {
    const resp = this.uploadBookCoverPicture$Response(params, context);
    return resp.then((r: StrictHttpResponse<{}>): {} => r.body);
  }

  /** Path part for operation `borrowBook()` */
  static readonly BorrowBookPath = '/books/borrow/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook$Response(
    params: BorrowBook$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<number>> {
    const obs = borrowBook(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook(params: BorrowBook$Params, context?: HttpContext): Promise<number> {
    const resp = this.borrowBook$Response(params, context);
    return resp.then((r: StrictHttpResponse<number>): number => r.body);
  }

  /** Path part for operation `updateShareableStatus()` */
  static readonly UpdateShareableStatusPath = '/books/shareable/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus$Response(
    params: UpdateShareableStatus$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<number>> {
    const obs = updateShareableStatus(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus(
    params: UpdateShareableStatus$Params,
    context?: HttpContext
  ): Promise<number> {
    const resp = this.updateShareableStatus$Response(params, context);
    return resp.then((r: StrictHttpResponse<number>): number => r.body);
  }

  /** Path part for operation `returnBorrowBook()` */
  static readonly ReturnBorrowBookPath = '/books/borrow/return/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowBook$Response(
    params: ReturnBorrowBook$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<number>> {
    const obs = returnBorrowBook(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowBook(params: ReturnBorrowBook$Params, context?: HttpContext): Promise<number> {
    const resp = this.returnBorrowBook$Response(params, context);
    return resp.then((r: StrictHttpResponse<number>): number => r.body);
  }

  /** Path part for operation `approveReturnBorrowBook()` */
  static readonly ApproveReturnBorrowBookPath = '/books/borrow/return/approve/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnBorrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowBook$Response(
    params: ApproveReturnBorrowBook$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<number>> {
    const obs = approveReturnBorrowBook(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnBorrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowBook(
    params: ApproveReturnBorrowBook$Params,
    context?: HttpContext
  ): Promise<number> {
    const resp = this.approveReturnBorrowBook$Response(params, context);
    return resp.then((r: StrictHttpResponse<number>): number => r.body);
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/books/archived/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(
    params: UpdateArchivedStatus$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<number>> {
    const obs = updateArchivedStatus(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(
    params: UpdateArchivedStatus$Params,
    context?: HttpContext
  ): Promise<number> {
    const resp = this.updateArchivedStatus$Response(params, context);
    return resp.then((r: StrictHttpResponse<number>): number => r.body);
  }

  /** Path part for operation `findAllReturnedBooks()` */
  static readonly FindAllReturnedBooksPath = '/books/retured';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooks$Response(
    params?: FindAllReturnedBooks$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    const obs = findAllReturnedBooks(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooks(
    params?: FindAllReturnedBooks$Params,
    context?: HttpContext
  ): Promise<PageResponseBorrowedBookResponse> {
    const resp = this.findAllReturnedBooks$Response(params, context);
    return resp.then(
      (r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse =>
        r.body
    );
  }

  /** Path part for operation `findAllBooksByOwner()` */
  static readonly FindAllBooksByOwnerPath = '/books/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooksByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByOwner$Response(
    params?: FindAllBooksByOwner$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<PageResponseBookResponse>> {
    const obs = findAllBooksByOwner(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooksByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByOwner(
    params?: FindAllBooksByOwner$Params,
    context?: HttpContext
  ): Promise<PageResponseBookResponse> {
    const resp = this.findAllBooksByOwner$Response(params, context);
    return resp.then(
      (r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body
    );
  }

  /** Path part for operation `findAllBorrowedBooks()` */
  static readonly FindAllBorrowedBooksPath = '/books/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooks$Response(
    params?: FindAllBorrowedBooks$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    const obs = findAllBorrowedBooks(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooks(
    params?: FindAllBorrowedBooks$Params,
    context?: HttpContext
  ): Promise<PageResponseBorrowedBookResponse> {
    const resp = this.findAllBorrowedBooks$Response(params, context);
    return resp.then(
      (r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse =>
        r.body
    );
  }

  /** Path part for operation `findById()` */
  static readonly FindByIdPath = '/books/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById$Response(
    params?: FindById$Params,
    context?: HttpContext
  ): Promise<StrictHttpResponse<BookResponse>> {
    const obs = findById(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById(params?: FindById$Params, context?: HttpContext): Promise<BookResponse> {
    const resp = this.findById$Response(params, context);
    return resp.then((r: StrictHttpResponse<BookResponse>): BookResponse => r.body);
  }
}
